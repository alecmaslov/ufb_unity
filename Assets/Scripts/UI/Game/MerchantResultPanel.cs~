using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UFB.Items;
using UFB.Network.RoomMessageTypes;
using UnityEngine;

public class MerchantResultPanel : MonoBehaviour
{
    public Transform resultList;
    public ItemCard resultItem;
    
    public List<ResultItem> itemList;
    public List<ResultItem> stackList;
    public List<ResultItem> powerList;
    public int coin;
    
    public void InitPanel( ResultItem[] items, ResultItem[] stacks, ResultItem[] powers, int _coin )
    {
        itemList.Clear();
        stackList.Clear();
        powerList.Clear();
        ClearResultList();
        
        itemList = items.ToList();
        stackList = stacks.ToList();
        powerList = powers.ToList();
        coin = _coin;

        StartCoroutine(CheckResult());
    }

    public void InitResult(bool isOld = true)
    {
        if (itemList.Count > 0)
        {
            foreach (var item in itemList)
            {
                int count = UIGameManager.instance.GetItemCount((ITEM) item.id);
                if(isOld) count -= item.count;
                AddResultItem(count, GlobalResources.instance.items[item.id], true, item.count > 0? Color.green : Color.red);
            }
        }
        
        if (powerList.Count > 0)
        {
            foreach (var item in powerList)
            {
                int count = UIGameManager.instance.GetItemCount((ITEM) item.id);
                if(isOld) count -= item.count;
                AddResultItem(count, GlobalResources.instance.powers[item.id], true, isOld? new Color(0.67f,0.67f,0.67f) : (item.count > 0 ? Color.green : Color.red));
            }
        }
        
        if (stackList.Count > 0)
        {
            foreach (var item in stackList)
            {
                int count = UIGameManager.instance.GetStackCount((STACK) item.id);
                if(isOld) count -= item.count;
                AddResultItem(count, GlobalResources.instance.items[item.id], true, isOld? new Color(0.67f,0.67f,0.67f) : (item.count > 0 ? Color.green : Color.red));
            }
        }

        if (coin != 0)
        {
            int count = UIGameManager.instance.controller.State.stats.coin;
            if(isOld) count -= coin;
            AddResultItem(count, GlobalResources.instance.coin, true, isOld? new Color(0.67f,0.67f,0.67f) : (coin > 0 ? Color.green : Color.red));
        }
    }
    
    IEnumerator CheckResult()
    {
        yield return new WaitForSeconds(1f);
        InitResult();
        yield return new WaitForSeconds(1f);
        ClearResultList();
        InitResult(false);
        yield return new WaitForSeconds(1f);
        gameObject.SetActive(false);
    }

    public void ClearResultList()
    {
        for (int i = 1; i < resultList.childCount; i++)
        {
            Destroy(resultList.GetChild(i).gameObject);
        }
    }
    
    public void AddResultItem(int count, Sprite sprite, bool isText = true, Color? color = null)
    {
        ItemCard itemCard = Instantiate(resultItem, resultList);
        itemCard.InitText(count.ToString());
        itemCard.InitImage(sprite);
        if (itemCard.countText != null)
        {
            itemCard.countText.gameObject.SetActive(isText);
            if(itemCard.countText.transform.parent != null)
                itemCard.countText.transform.parent.gameObject.SetActive(isText);
        }

        if (color != null)
        {
            itemCard.InitTextBG(color.Value);
        }
        
        itemCard.gameObject.SetActive(true);
    }

    

}
