//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace UFB.Input
{
    public partial class @GameInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""OrbitView"",
            ""id"": ""7489db06-c285-40b9-a2ca-0ef713fbc534"",
            ""actions"": [
                {
                    ""name"": ""TouchInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0b93547b-d14e-48f7-873a-f6710a360d09"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""c653a1c4-1e1f-479c-a795-badf8fb265af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bbe4411c-b899-44b0-bb77-7745bcf9aeb7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""4c4b6eb5-d862-4ff5-a0ec-1f53888f4cc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Value"",
                    ""id"": ""b37c0540-5f6f-42b4-a802-7c8086ffa3b6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""59b774cf-7429-4ee6-b954-babc14b755a3"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa750fc0-cff9-4212-83f5-e9f706605df3"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97458cde-6fb8-473b-9ed7-31ad99cdd2cd"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fa2b461-a1b5-4516-8018-53e794f8a708"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11b1d581-24a3-4c17-815f-3bb4118a319e"",
                    ""path"": ""<Touchscreen>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""444e250a-251a-420c-abd9-47f3f49be549"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Main"",
            ""bindingGroup"": ""Main"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // OrbitView
            m_OrbitView = asset.FindActionMap("OrbitView", throwIfNotFound: true);
            m_OrbitView_TouchInput = m_OrbitView.FindAction("TouchInput", throwIfNotFound: true);
            m_OrbitView_TouchPress = m_OrbitView.FindAction("TouchPress", throwIfNotFound: true);
            m_OrbitView_TouchPosition = m_OrbitView.FindAction("TouchPosition", throwIfNotFound: true);
            m_OrbitView_MouseClick = m_OrbitView.FindAction("MouseClick", throwIfNotFound: true);
            m_OrbitView_RotateCamera = m_OrbitView.FindAction("RotateCamera", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // OrbitView
        private readonly InputActionMap m_OrbitView;
        private List<IOrbitViewActions> m_OrbitViewActionsCallbackInterfaces = new List<IOrbitViewActions>();
        private readonly InputAction m_OrbitView_TouchInput;
        private readonly InputAction m_OrbitView_TouchPress;
        private readonly InputAction m_OrbitView_TouchPosition;
        private readonly InputAction m_OrbitView_MouseClick;
        private readonly InputAction m_OrbitView_RotateCamera;
        public struct OrbitViewActions
        {
            private @GameInput m_Wrapper;
            public OrbitViewActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @TouchInput => m_Wrapper.m_OrbitView_TouchInput;
            public InputAction @TouchPress => m_Wrapper.m_OrbitView_TouchPress;
            public InputAction @TouchPosition => m_Wrapper.m_OrbitView_TouchPosition;
            public InputAction @MouseClick => m_Wrapper.m_OrbitView_MouseClick;
            public InputAction @RotateCamera => m_Wrapper.m_OrbitView_RotateCamera;
            public InputActionMap Get() { return m_Wrapper.m_OrbitView; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(OrbitViewActions set) { return set.Get(); }
            public void AddCallbacks(IOrbitViewActions instance)
            {
                if (instance == null || m_Wrapper.m_OrbitViewActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_OrbitViewActionsCallbackInterfaces.Add(instance);
                @TouchInput.started += instance.OnTouchInput;
                @TouchInput.performed += instance.OnTouchInput;
                @TouchInput.canceled += instance.OnTouchInput;
                @TouchPress.started += instance.OnTouchPress;
                @TouchPress.performed += instance.OnTouchPress;
                @TouchPress.canceled += instance.OnTouchPress;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @RotateCamera.started += instance.OnRotateCamera;
                @RotateCamera.performed += instance.OnRotateCamera;
                @RotateCamera.canceled += instance.OnRotateCamera;
            }

            private void UnregisterCallbacks(IOrbitViewActions instance)
            {
                @TouchInput.started -= instance.OnTouchInput;
                @TouchInput.performed -= instance.OnTouchInput;
                @TouchInput.canceled -= instance.OnTouchInput;
                @TouchPress.started -= instance.OnTouchPress;
                @TouchPress.performed -= instance.OnTouchPress;
                @TouchPress.canceled -= instance.OnTouchPress;
                @TouchPosition.started -= instance.OnTouchPosition;
                @TouchPosition.performed -= instance.OnTouchPosition;
                @TouchPosition.canceled -= instance.OnTouchPosition;
                @MouseClick.started -= instance.OnMouseClick;
                @MouseClick.performed -= instance.OnMouseClick;
                @MouseClick.canceled -= instance.OnMouseClick;
                @RotateCamera.started -= instance.OnRotateCamera;
                @RotateCamera.performed -= instance.OnRotateCamera;
                @RotateCamera.canceled -= instance.OnRotateCamera;
            }

            public void RemoveCallbacks(IOrbitViewActions instance)
            {
                if (m_Wrapper.m_OrbitViewActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IOrbitViewActions instance)
            {
                foreach (var item in m_Wrapper.m_OrbitViewActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_OrbitViewActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public OrbitViewActions @OrbitView => new OrbitViewActions(this);
        private int m_MainSchemeIndex = -1;
        public InputControlScheme MainScheme
        {
            get
            {
                if (m_MainSchemeIndex == -1) m_MainSchemeIndex = asset.FindControlSchemeIndex("Main");
                return asset.controlSchemes[m_MainSchemeIndex];
            }
        }
        public interface IOrbitViewActions
        {
            void OnTouchInput(InputAction.CallbackContext context);
            void OnTouchPress(InputAction.CallbackContext context);
            void OnTouchPosition(InputAction.CallbackContext context);
            void OnMouseClick(InputAction.CallbackContext context);
            void OnRotateCamera(InputAction.CallbackContext context);
        }
    }
}
